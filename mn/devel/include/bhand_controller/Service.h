// Generated by gencpp from file bhand_controller/Service.msg
// DO NOT EDIT!


#ifndef BHAND_CONTROLLER_MESSAGE_SERVICE_H
#define BHAND_CONTROLLER_MESSAGE_SERVICE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bhand_controller
{
template <class ContainerAllocator>
struct Service_
{
  typedef Service_<ContainerAllocator> Type;

  Service_()
    {
    }
  Service_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }




    enum { INIT_HAND = 1 };
     enum { CLOSE_GRASP = 2 };
     enum { OPEN_GRASP = 3 };
     enum { SET_GRASP_1 = 4 };
     enum { SET_GRASP_2 = 5 };
     enum { CLOSE_HALF_GRASP = 6 };
     enum { TARE_FTS = 7 };
 

  typedef boost::shared_ptr< ::bhand_controller::Service_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bhand_controller::Service_<ContainerAllocator> const> ConstPtr;

}; // struct Service_

typedef ::bhand_controller::Service_<std::allocator<void> > Service;

typedef boost::shared_ptr< ::bhand_controller::Service > ServicePtr;
typedef boost::shared_ptr< ::bhand_controller::Service const> ServiceConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bhand_controller::Service_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bhand_controller::Service_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bhand_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'bhand_controller': ['/home/baxter/mn/src/barrett_hand/bhand_controller/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bhand_controller::Service_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bhand_controller::Service_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bhand_controller::Service_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bhand_controller::Service_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bhand_controller::Service_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bhand_controller::Service_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bhand_controller::Service_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c09093085862e16e122942cf27b990b9";
  }

  static const char* value(const ::bhand_controller::Service_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc09093085862e16eULL;
  static const uint64_t static_value2 = 0x122942cf27b990b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::bhand_controller::Service_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bhand_controller/Service";
  }

  static const char* value(const ::bhand_controller::Service_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bhand_controller::Service_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# constants\n\
int32 INIT_HAND = 1\n\
int32 CLOSE_GRASP = 2\n\
int32 OPEN_GRASP = 3\n\
int32 SET_GRASP_1 = 4\n\
int32 SET_GRASP_2 = 5\n\
int32 CLOSE_HALF_GRASP = 6\n\
int32 TARE_FTS = 7\n\
\n\
";
  }

  static const char* value(const ::bhand_controller::Service_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bhand_controller::Service_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Service_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bhand_controller::Service_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::bhand_controller::Service_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // BHAND_CONTROLLER_MESSAGE_SERVICE_H
