// Generated by gencpp from file bhand_controller/State.msg
// DO NOT EDIT!


#ifndef BHAND_CONTROLLER_MESSAGE_STATE_H
#define BHAND_CONTROLLER_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bhand_controller
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : state(0)
    , control_mode()
    , hand_initialized(false)
    , desired_freq(0.0)
    , real_freq(0.0)
    , state_description()
    , temp_f1()
    , temp_f2()
    , temp_f3()
    , temp_spread()  {
      temp_f1.assign(0.0);

      temp_f2.assign(0.0);

      temp_f3.assign(0.0);

      temp_spread.assign(0.0);
  }
  State_(const ContainerAllocator& _alloc)
    : state(0)
    , control_mode(_alloc)
    , hand_initialized(false)
    , desired_freq(0.0)
    , real_freq(0.0)
    , state_description(_alloc)
    , temp_f1()
    , temp_f2()
    , temp_f3()
    , temp_spread()  {
  (void)_alloc;
      temp_f1.assign(0.0);

      temp_f2.assign(0.0);

      temp_f3.assign(0.0);

      temp_spread.assign(0.0);
  }



   typedef int32_t _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_mode_type;
  _control_mode_type control_mode;

   typedef uint8_t _hand_initialized_type;
  _hand_initialized_type hand_initialized;

   typedef float _desired_freq_type;
  _desired_freq_type desired_freq;

   typedef float _real_freq_type;
  _real_freq_type real_freq;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_description_type;
  _state_description_type state_description;

   typedef boost::array<float, 2>  _temp_f1_type;
  _temp_f1_type temp_f1;

   typedef boost::array<float, 2>  _temp_f2_type;
  _temp_f2_type temp_f2;

   typedef boost::array<float, 2>  _temp_f3_type;
  _temp_f3_type temp_f3;

   typedef boost::array<float, 2>  _temp_spread_type;
  _temp_spread_type temp_spread;


    enum { INIT_STATE = 100 };
     enum { STANDBY_STATE = 200 };
     enum { READY_STATE = 300 };
     enum { EMERGENCY_STATE = 400 };
     enum { FAILURE_STATE = 500 };
     enum { SHUTDOWN_STATE = 600 };
 

  typedef boost::shared_ptr< ::bhand_controller::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bhand_controller::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::bhand_controller::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::bhand_controller::State > StatePtr;
typedef boost::shared_ptr< ::bhand_controller::State const> StateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bhand_controller::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bhand_controller::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bhand_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'bhand_controller': ['/home/baxter/mn/src/barrett_hand/bhand_controller/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bhand_controller::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bhand_controller::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bhand_controller::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bhand_controller::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bhand_controller::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bhand_controller::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bhand_controller::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43dbdaf8df84846b4d0203e0d6845e11";
  }

  static const char* value(const ::bhand_controller::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43dbdaf8df84846bULL;
  static const uint64_t static_value2 = 0x4d0203e0d6845e11ULL;
};

template<class ContainerAllocator>
struct DataType< ::bhand_controller::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bhand_controller/State";
  }

  static const char* value(const ::bhand_controller::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bhand_controller::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# constants\n\
int32 INIT_STATE = 100\n\
int32 STANDBY_STATE = 200\n\
int32 READY_STATE = 300\n\
int32 EMERGENCY_STATE = 400\n\
int32 FAILURE_STATE = 500\n\
int32 SHUTDOWN_STATE = 600\n\
\n\
\n\
# state of the component\n\
int32 state\n\
# Control mode\n\
string control_mode\n\
# Flag active when the hand position has been initialized\n\
bool hand_initialized\n\
# desired control loop frecuency\n\
float32 desired_freq\n\
# real frecuency \n\
float32 real_freq\n\
# Description of the state\n\
string state_description\n\
# [temp_motor, temp_puck]\n\
float32[2] temp_f1\n\
# [temp_motor, temp_puck]\n\
float32[2] temp_f2\n\
# [temp_motor, temp_puck]\n\
float32[2] temp_f3\n\
# [temp_motor, temp_puck]\n\
float32[2] temp_spread\n\
";
  }

  static const char* value(const ::bhand_controller::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bhand_controller::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.control_mode);
      stream.next(m.hand_initialized);
      stream.next(m.desired_freq);
      stream.next(m.real_freq);
      stream.next(m.state_description);
      stream.next(m.temp_f1);
      stream.next(m.temp_f2);
      stream.next(m.temp_f3);
      stream.next(m.temp_spread);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bhand_controller::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bhand_controller::State_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "control_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_mode);
    s << indent << "hand_initialized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_initialized);
    s << indent << "desired_freq: ";
    Printer<float>::stream(s, indent + "  ", v.desired_freq);
    s << indent << "real_freq: ";
    Printer<float>::stream(s, indent + "  ", v.real_freq);
    s << indent << "state_description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_description);
    s << indent << "temp_f1[]" << std::endl;
    for (size_t i = 0; i < v.temp_f1.size(); ++i)
    {
      s << indent << "  temp_f1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temp_f1[i]);
    }
    s << indent << "temp_f2[]" << std::endl;
    for (size_t i = 0; i < v.temp_f2.size(); ++i)
    {
      s << indent << "  temp_f2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temp_f2[i]);
    }
    s << indent << "temp_f3[]" << std::endl;
    for (size_t i = 0; i < v.temp_f3.size(); ++i)
    {
      s << indent << "  temp_f3[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temp_f3[i]);
    }
    s << indent << "temp_spread[]" << std::endl;
    for (size_t i = 0; i < v.temp_spread.size(); ++i)
    {
      s << indent << "  temp_spread[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temp_spread[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BHAND_CONTROLLER_MESSAGE_STATE_H
