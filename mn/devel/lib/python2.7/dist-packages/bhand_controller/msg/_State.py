# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bhand_controller/State.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class State(genpy.Message):
  _md5sum = "43dbdaf8df84846b4d0203e0d6845e11"
  _type = "bhand_controller/State"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# constants
int32 INIT_STATE = 100
int32 STANDBY_STATE = 200
int32 READY_STATE = 300
int32 EMERGENCY_STATE = 400
int32 FAILURE_STATE = 500
int32 SHUTDOWN_STATE = 600


# state of the component
int32 state
# Control mode
string control_mode
# Flag active when the hand position has been initialized
bool hand_initialized
# desired control loop frecuency
float32 desired_freq
# real frecuency 
float32 real_freq
# Description of the state
string state_description
# [temp_motor, temp_puck]
float32[2] temp_f1
# [temp_motor, temp_puck]
float32[2] temp_f2
# [temp_motor, temp_puck]
float32[2] temp_f3
# [temp_motor, temp_puck]
float32[2] temp_spread
"""
  # Pseudo-constants
  INIT_STATE = 100
  STANDBY_STATE = 200
  READY_STATE = 300
  EMERGENCY_STATE = 400
  FAILURE_STATE = 500
  SHUTDOWN_STATE = 600

  __slots__ = ['state','control_mode','hand_initialized','desired_freq','real_freq','state_description','temp_f1','temp_f2','temp_f3','temp_spread']
  _slot_types = ['int32','string','bool','float32','float32','string','float32[2]','float32[2]','float32[2]','float32[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,control_mode,hand_initialized,desired_freq,real_freq,state_description,temp_f1,temp_f2,temp_f3,temp_spread

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.control_mode is None:
        self.control_mode = ''
      if self.hand_initialized is None:
        self.hand_initialized = False
      if self.desired_freq is None:
        self.desired_freq = 0.
      if self.real_freq is None:
        self.real_freq = 0.
      if self.state_description is None:
        self.state_description = ''
      if self.temp_f1 is None:
        self.temp_f1 = [0.,0.]
      if self.temp_f2 is None:
        self.temp_f2 = [0.,0.]
      if self.temp_f3 is None:
        self.temp_f3 = [0.,0.]
      if self.temp_spread is None:
        self.temp_spread = [0.,0.]
    else:
      self.state = 0
      self.control_mode = ''
      self.hand_initialized = False
      self.desired_freq = 0.
      self.real_freq = 0.
      self.state_description = ''
      self.temp_f1 = [0.,0.]
      self.temp_f2 = [0.,0.]
      self.temp_f3 = [0.,0.]
      self.temp_spread = [0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.state))
      _x = self.control_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2f.pack(_x.hand_initialized, _x.desired_freq, _x.real_freq))
      _x = self.state_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_2f.pack(*self.temp_f1))
      buff.write(_struct_2f.pack(*self.temp_f2))
      buff.write(_struct_2f.pack(*self.temp_f3))
      buff.write(_struct_2f.pack(*self.temp_spread))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.state,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_mode = str[start:end].decode('utf-8')
      else:
        self.control_mode = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.hand_initialized, _x.desired_freq, _x.real_freq,) = _struct_B2f.unpack(str[start:end])
      self.hand_initialized = bool(self.hand_initialized)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_description = str[start:end].decode('utf-8')
      else:
        self.state_description = str[start:end]
      start = end
      end += 8
      self.temp_f1 = _struct_2f.unpack(str[start:end])
      start = end
      end += 8
      self.temp_f2 = _struct_2f.unpack(str[start:end])
      start = end
      end += 8
      self.temp_f3 = _struct_2f.unpack(str[start:end])
      start = end
      end += 8
      self.temp_spread = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.state))
      _x = self.control_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2f.pack(_x.hand_initialized, _x.desired_freq, _x.real_freq))
      _x = self.state_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.temp_f1.tostring())
      buff.write(self.temp_f2.tostring())
      buff.write(self.temp_f3.tostring())
      buff.write(self.temp_spread.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.state,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_mode = str[start:end].decode('utf-8')
      else:
        self.control_mode = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.hand_initialized, _x.desired_freq, _x.real_freq,) = _struct_B2f.unpack(str[start:end])
      self.hand_initialized = bool(self.hand_initialized)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_description = str[start:end].decode('utf-8')
      else:
        self.state_description = str[start:end]
      start = end
      end += 8
      self.temp_f1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 8
      self.temp_f2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 8
      self.temp_f3 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 8
      self.temp_spread = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_B2f = struct.Struct("<B2f")
_struct_2f = struct.Struct("<2f")
